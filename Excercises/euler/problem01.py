import math
from functools import reduce


def problem001(count):
    '''
    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
    :param count:
    :return:
    '''

    values = (x for x in range(1, count) if x % 5 == 0 or x % 3 == 0)
    return reduce(lambda x, y: x + y, values)


def problem002(limit):
    '''

    Each new term in the Fibonacci sequence is generated by adding the previous
     two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not
    exceed four million, find the sum of the even-valued terms.
    '''

    n = 1

    list_of_fibs = [n]
    while True:
        previous = n
        n = list_of_fibs[-1]
        fib = previous + n

        if fib > limit:
            break
        list_of_fibs.append(fib)

    return sum(filter(lambda x: x % 2 == 0, list_of_fibs))


def problem003(number):
    '''
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143 ?

        divide number by 2
        generate all primes until get that number
        check max num that divides without reminder
    '''
    max_prime = -1

    while number % 2 == 0:
        max_prime = 2
        number >>= 1

    for i in range(3, int(math.sqrt(number))+1, 2):
        while number % i == 0:
            max_prime = i
            number /= i

    if number> 2:
        max_prime = number

    return int(max_prime)


def get_prime_sieve(limit):
    m = limit + 1

    numbers = [True] * m
    for i in range(2, int(limit ** 0.5 + 1)):
        if numbers[i]:
            for j in range(i * i, m, i):
                numbers[j] = False
    primes = []
    for i in range(2, m):
        if numbers[i]:
            primes.append(i)
    return primes


def is_prime(a):
    if a < 2:
        return False
    if a != 2 and a % 2 == 0:
        return False
    else:
        return all(a % i for i in range(3, int(a ** 0.5) + 1))
