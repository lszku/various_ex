from functools import reduce


def problem001(count):
    '''
    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
    :param count:
    :return:
    '''

    values = (x for x in range(1, count) if x % 5 == 0 or x % 3 == 0)
    return reduce(lambda x, y: x + y, values)


def problem002(limit):
    '''

    Each new term in the Fibonacci sequence is generated by adding the previous
     two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not
    exceed four million, find the sum of the even-valued terms.
    '''

    n = 1

    list_of_fibs = [ n]
    while True:
        previous = n
        n = list_of_fibs[-1]
        fib = previous + n

        if fib > limit:
            break
        list_of_fibs.append(fib)

    return sum(filter(lambda x: x % 2 == 0, list_of_fibs))
